openapi: 3.0.3
info:
  title: StoryNode API
  description: |
    Something special

  version: 0.0.1

servers:
  - url: http://localhost:3000
tags:
  - name: stories
    description: Everything about your stories
  - name: users
    description: Everything about the users

paths:
#################################################
# /storyline
#################################################
  /storyline:
    get:
      tags: [stories]
      operationId: GetStorylineList
      summary: Get a list of all storylines.
      description: Get a list of all stories
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/storyline'

    post:
      summary: Create a new storyline.
      operationId: CreateStoryline
      tags: [stories]
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/storyline'
      responses:
        201:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/storyline'

#################################################
# /storyline/{storyId}
#################################################
  /storyline/{storyId}:
    get:
      summary: Get a single storylines.
      operationId: GetStorylineById
      tags: [stories]
      parameters:
        - $ref: '#/components/parameters/storyId'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/storyline'
        404:
          description: Storyline not found

    put:
      summary: Update an existing storyline.
      operationId: UpdateStoryline
      tags: [stories]
      parameters:
        - $ref: '#/components/parameters/storyId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/storyline'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/storyline'
        404:
          description: Storyline not found

    delete:
      summary: Delete a storyline.
      operationId: DeleteStoryline
      tags: [stories]
      parameters:
        - $ref: '#/components/parameters/storyId'
      responses:
        204:
          description: Storyline was deleted.
        404:
          description: Storyline not found

#################################################
# /storynode
#################################################
  /storynode:
    get:
      summary: Get a list of storynodes.
      operationId: GetStoryNodeList
      tags: [stories]
      parameters:
        - in: query
          name: nodeId
          schema:
            type: array
            items:
              type: integer
          required: false
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/storyNode'
    post:
      summary: Create a new storynode.
      operationId: CreateStoryNode
      tags: [stories]
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/storyNode'
      responses:
        201:
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/storyNode'

#################################################
# /storynode/{nodeId}
#################################################
  /storynode/{nodeId}:
    get:
      summary: Get a single storynode.
      operationId: GetStoryNodeById
      tags: [stories]
      parameters:
        - $ref: '#/components/parameters/nodeId'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/storyNode'
        404:
          description: Not found

    put:
      summary: Update a storynode.
      operationId: UpdateStoryNode
      tags: [stories]
      parameters:
        - $ref: '#/components/parameters/nodeId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/storyNode'
      responses:
        200:
          description: Updated ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/storyNode'
        404:
          description: Not found

    delete:
      summary: Delete a storynode.
      operationId: DeleteStoryNode
      tags: [stories]
      parameters:
        - $ref: '#/components/parameters/nodeId'
      responses:
        204:
          description: deleted
        404:
          description: Not found

#################################################
# /users
#################################################
  /users:
    get:
      summary: Get a list of all users
      operationId: GetUsersList
      tags: [users]
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/user'

    post:
      summary: Create a new user
      operationId: CreateUser
      tags: [users]
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/user'
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'

#################################################
# /users/{userId}
#################################################
  /users/{userId}:
    get:
      summary: Get a single user selected by uuid
      operationId: GetUserByUUID
      tags: [users]
      parameters:
        - $ref: '#/components/parameters/userId'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
        404:
          description: user nod found

    put:
      summary: Edit an existing user selected by uuid
      operationId: UpdateUser
      tags: [users]
      parameters:
        - $ref: '#/components/parameters/userId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/updateUser'
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
        404:
          description: user nod found

    delete:
      summary: Delete a user selected by uuid
      operationId: DeleteUser
      tags: [users]
      parameters:
        - $ref: '#/components/parameters/userId'
      responses:
        204:
          description: Ok
        404:
          description: user nod found

components:
  parameters:
    storyId:
      in: path
      name: storyId
      schema:
        type: integer
      required: true
      description: Numeric ID of the storyline.

    nodeId:
      in: path
      name: nodeId
      schema:
        type: integer
      required: true
      description: Numeric ID of the storynode.

    userId:
      in: path
      name: userId
      schema:
        type: string
        format: uuid
      required: true
      description: UUID of the user

  schemas:
    id:
      type: integer
      readOnly: true

    uuid:
      type: string
      format: uuid
      readOnly: true

    password:
      type: string
      writeOnly: true

    user:
      type: object
      properties:
        userId:
          $ref: '#/components/schemas/uuid'
        displayName:
          type: string
        # TODO: Consider if email should be removed from most get endpoints.
        #       Maybe email should be kept private??
        email:
          type: string
          format: email
        password:
          $ref: '#/components/schemas/password'

    updateUser:
      type: object
      properties:
        userId:
          $ref: '#/components/schemas/uuid'
        displayName:
          type: string
        email:
          type: string
          format: email
        currentPassword:
          $ref: '#/components/schemas/password'
          required: true
        newPassword:
          $ref: '#/components/schemas/password'
          required: true


    storyline:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/id'
        title:
          type: string
        description:
          type: string
        ownerId:
          type: integer
        asigneeIds:
          type: array
          items:
            type: integer
        startNode:
          type: string
          format: uri
          example: '/storynode/1'
        storyNodeIds:
          type: array
          items:
            type: integer

    storyNode:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/id'
        name:
          type: string
        text:
          type: string
        nodeType:
          type: string
          enum: ['actionNode', 'textnode']
        nodeActions:
          type: array
          nullable: true
          items:
            type: string
        prevNode:
          nullable: true
          type: string
          format: uri
          example: '/storynode/1'
        nextNode:
          nullable: true
          type: string
          format: uri
          example: '/storynode/2'
